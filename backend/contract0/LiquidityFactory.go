// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract0

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Contract0MetaData contains all meta data concerning the Contract0 contract.
var Contract0MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"contractLiquidity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAddressWithName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2Address\",\"type\":\"address\"}],\"name\":\"newLiquidity\",\"outputs\":[{\"internalType\":\"contractLiquidity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614722806100606000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806311d4b15d146200006f57806369dc9ff314620000915780638da5cb5b14620000c7578063a6f9dae114620000e9578063c522bb801462000109578063f66aee2d146200013f575b600080fd5b6200007962000175565b60405162000088919062000ada565b60405180910390f35b620000af6004803603810190620000a9919062000b77565b62000258565b604051620000be919062000c14565b60405180910390f35b620000d16200028b565b604051620000e0919062000c42565b60405180910390f35b62000107600480360381019062000101919062000b77565b620002af565b005b62000127600480360381019062000121919062000c5f565b62000385565b60405162000136919062000c14565b60405180910390f35b6200015d600480360381019062000157919062000df7565b620006d3565b6040516200016c919062000c42565b60405180910390f35b60606003805480602002602001604051908101604052809291908181526020016000905b828210156200024f578382906000526020600020018054620001bb9062000e77565b80601f0160208091040260200160405190810160405280929190818152602001828054620001e99062000e77565b80156200023a5780601f106200020e576101008083540402835291602001916200023a565b820191906000526020600020905b8154815290600101906020018083116200021c57829003601f168201915b50505050508152602001906001019062000199565b50505050905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003389062000f0d565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200041a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004119062000f0d565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000468573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000493919062000fad565b905060008473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200050e919062000fad565b9050600082826040516020016200052792919062001071565b604051602081830303815290604052905060006200054a6003805490506200071d565b6040516020016200055c9190620010d0565b6040516020818303038152906040529050600088888484604051620005819062000962565b6200059094939291906200113b565b604051809103906000f080158015620005ad573d6000803e3d6000fd5b509050600383908060018154018082558091505060019003906000526020600020016000909190919091509081620005e6919062001368565b5080600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028460405162000678919062001491565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080965050505050505092915050565b6000600282604051620006e7919062001491565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600060016200072e84620007f6565b01905060008167ffffffffffffffff81111562000750576200074f62000cb0565b5b6040519080825280601f01601f191660200182016040528015620007835781602001600182028036833780820191505090505b509050600082602001820190505b600115620007eb578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581620007de57620007dd620014aa565b5b0494506000850362000791575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000858577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816200084e576200084d620014aa565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831062000899576d04ee2d6d415b85acef810000000083816200088f576200088e620014aa565b5b0492506020810190505b662386f26fc100008310620008cc57662386f26fc100008381620008c257620008c1620014aa565b5b0492506010810190505b6305f5e1008310620008f9576305f5e1008381620008ef57620008ee620014aa565b5b0492506008810190505b612710831062000922576127108381620009185762000917620014aa565b5b0492506004810190505b606483106200094957606483816200093f576200093e620014aa565b5b0492506002810190505b600a831062000959576001810190505b80915050919050565b61321380620014da83390190565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620009d8578082015181840152602081019050620009bb565b60008484015250505050565b6000601f19601f8301169050919050565b600062000a02826200099c565b62000a0e8185620009a7565b935062000a20818560208601620009b8565b62000a2b81620009e4565b840191505092915050565b600062000a448383620009f5565b905092915050565b6000602082019050919050565b600062000a668262000970565b62000a7281856200097b565b93508360208202850162000a86856200098c565b8060005b8581101562000ac8578484038952815162000aa6858262000a36565b945062000ab38362000a4c565b925060208a0199505060018101905062000a8a565b50829750879550505050505092915050565b6000602082019050818103600083015262000af6818462000a59565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b3f8262000b12565b9050919050565b62000b518162000b32565b811462000b5d57600080fd5b50565b60008135905062000b718162000b46565b92915050565b60006020828403121562000b905762000b8f62000b08565b5b600062000ba08482850162000b60565b91505092915050565b6000819050919050565b600062000bd462000bce62000bc88462000b12565b62000ba9565b62000b12565b9050919050565b600062000be88262000bb3565b9050919050565b600062000bfc8262000bdb565b9050919050565b62000c0e8162000bef565b82525050565b600060208201905062000c2b600083018462000c03565b92915050565b62000c3c8162000b32565b82525050565b600060208201905062000c59600083018462000c31565b92915050565b6000806040838503121562000c795762000c7862000b08565b5b600062000c898582860162000b60565b925050602062000c9c8582860162000b60565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000cea82620009e4565b810181811067ffffffffffffffff8211171562000d0c5762000d0b62000cb0565b5b80604052505050565b600062000d2162000afe565b905062000d2f828262000cdf565b919050565b600067ffffffffffffffff82111562000d525762000d5162000cb0565b5b62000d5d82620009e4565b9050602081019050919050565b82818337600083830152505050565b600062000d9062000d8a8462000d34565b62000d15565b90508281526020810184848401111562000daf5762000dae62000cab565b5b62000dbc84828562000d6a565b509392505050565b600082601f83011262000ddc5762000ddb62000ca6565b5b813562000dee84826020860162000d79565b91505092915050565b60006020828403121562000e105762000e0f62000b08565b5b600082013567ffffffffffffffff81111562000e315762000e3062000b0d565b5b62000e3f8482850162000dc4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000e9057607f821691505b60208210810362000ea65762000ea562000e48565b5b50919050565b600082825260208201905092915050565b7f53656e646572206e6f7420617574686f72697a65642e00000000000000000000600082015250565b600062000ef560168362000eac565b915062000f028262000ebd565b602082019050919050565b6000602082019050818103600083015262000f288162000ee6565b9050919050565b600062000f4662000f408462000d34565b62000d15565b90508281526020810184848401111562000f655762000f6462000cab565b5b62000f72848285620009b8565b509392505050565b600082601f83011262000f925762000f9162000ca6565b5b815162000fa484826020860162000f2f565b91505092915050565b60006020828403121562000fc65762000fc562000b08565b5b600082015167ffffffffffffffff81111562000fe75762000fe662000b0d565b5b62000ff58482850162000f7a565b91505092915050565b600081519050919050565b600081905092915050565b6000620010218262000ffe565b6200102d818562001009565b93506200103f818560208601620009b8565b80840191505092915050565b7f2d00000000000000000000000000000000000000000000000000000000000000815250565b60006200107f828562001014565b91506200108c826200104b565b6001820191506200109e828462001014565b91508190509392505050565b7f57454d45582d0000000000000000000000000000000000000000000000000000815250565b6000620010dd82620010aa565b600682019150620010ef828462001014565b915081905092915050565b600062001107826200099c565b62001113818562000eac565b935062001125818560208601620009b8565b6200113081620009e4565b840191505092915050565b600060808201905062001152600083018762000c31565b62001161602083018662000c31565b8181036040830152620011758185620010fa565b905081810360608301526200118b8184620010fa565b905095945050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620011fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620011bb565b620012068683620011bb565b95508019841693508086168417925050509392505050565b6000819050919050565b600062001249620012436200123d846200121e565b62000ba9565b6200121e565b9050919050565b6000819050919050565b620012658362001228565b6200127d620012748262001250565b848454620011c8565b825550505050565b600090565b6200129462001285565b620012a18184846200125a565b505050565b5b81811015620012c957620012bd6000826200128a565b600181019050620012a7565b5050565b601f8211156200131857620012e28162001196565b620012ed84620011ab565b81016020851015620012fd578190505b620013156200130c85620011ab565b830182620012a6565b50505b505050565b600082821c905092915050565b60006200133d600019846008026200131d565b1980831691505092915050565b60006200135883836200132a565b9150826002028217905092915050565b62001373826200099c565b67ffffffffffffffff8111156200138f576200138e62000cb0565b5b6200139b825462000e77565b620013a8828285620012cd565b600060209050601f831160018114620013e05760008415620013cb578287015190505b620013d785826200134a565b86555062001447565b601f198416620013f08662001196565b60005b828110156200141a57848901518255600182019150602085019450602081019050620013f3565b868310156200143a578489015162001436601f8916826200132a565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600062001467826200099c565b6200147381856200144f565b935062001485818560208601620009b8565b80840191505092915050565b60006200149f82846200145a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe608060405260006007553480156200001657600080fd5b50604051620032133803806200321383398181016040528101906200003c9190620002e8565b818181600390816200004f9190620005e3565b508060049081620000619190620005e3565b50505083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620006ca565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001318262000104565b9050919050565b620001438162000124565b81146200014f57600080fd5b50565b600081519050620001638162000138565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001be8262000173565b810181811067ffffffffffffffff82111715620001e057620001df62000184565b5b80604052505050565b6000620001f5620000f0565b9050620002038282620001b3565b919050565b600067ffffffffffffffff82111562000226576200022562000184565b5b620002318262000173565b9050602081019050919050565b60005b838110156200025e57808201518184015260208101905062000241565b60008484015250505050565b6000620002816200027b8462000208565b620001e9565b905082815260208101848484011115620002a0576200029f6200016e565b5b620002ad8482856200023e565b509392505050565b600082601f830112620002cd57620002cc62000169565b5b8151620002df8482602086016200026a565b91505092915050565b60008060008060808587031215620003055762000304620000fa565b5b6000620003158782880162000152565b9450506020620003288782880162000152565b935050604085015167ffffffffffffffff8111156200034c576200034b620000ff565b5b6200035a87828801620002b5565b925050606085015167ffffffffffffffff8111156200037e576200037d620000ff565b5b6200038c87828801620002b5565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003eb57607f821691505b602082108103620004015762000400620003a3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200042c565b6200047786836200042c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004c4620004be620004b8846200048f565b62000499565b6200048f565b9050919050565b6000819050919050565b620004e083620004a3565b620004f8620004ef82620004cb565b84845462000439565b825550505050565b600090565b6200050f62000500565b6200051c818484620004d5565b505050565b5b8181101562000544576200053860008262000505565b60018101905062000522565b5050565b601f82111562000593576200055d8162000407565b62000568846200041c565b8101602085101562000578578190505b6200059062000587856200041c565b83018262000521565b50505b505050565b600082821c905092915050565b6000620005b86000198460080262000598565b1980831691505092915050565b6000620005d38383620005a5565b9150826002028217905092915050565b620005ee8262000398565b67ffffffffffffffff8111156200060a576200060962000184565b5b620006168254620003d2565b6200062382828562000548565b600060209050601f8311600181146200065b576000841562000646578287015190505b620006528582620005c5565b865550620006c2565b601f1984166200066b8662000407565b60005b8281101562000695578489015182556001820191506020850194506020810190506200066e565b86831015620006b55784890151620006b1601f891682620005a5565b8355505b6001600288020188555050505b505050505050565b612b3980620006da6000396000f3fe6080604052600436106101095760003560e01c806370a08231116100955780639cd441da116100645780639cd441da14610398578063a457c2d7146103d6578063a9059cbb14610413578063d004f0f714610450578063dd62ed3e1461048057610109565b806370a08231146102c75780637ae316d01461030457806395d89b411461032f5780639c8f9f231461035a57610109565b806323b872dd116100dc57806323b872dd146101ce578063313ce5671461020b578063395093511461023657806345cbe2e7146102735780636f7e93621461028a57610109565b806306fdde031461010e5780630910a51014610139578063095ea7b31461016657806318160ddd146101a3575b600080fd5b34801561011a57600080fd5b506101236104bd565b6040516101309190611dfd565b60405180910390f35b34801561014557600080fd5b5061014e61054f565b60405161015d93929190611e38565b60405180910390f35b34801561017257600080fd5b5061018d60048036038101906101889190611efe565b61069f565b60405161019a9190611f59565b60405180910390f35b3480156101af57600080fd5b506101b86106c2565b6040516101c59190611f74565b60405180910390f35b3480156101da57600080fd5b506101f560048036038101906101f09190611f8f565b6106cc565b6040516102029190611f59565b60405180910390f35b34801561021757600080fd5b506102206106fb565b60405161022d9190611ffe565b60405180910390f35b34801561024257600080fd5b5061025d60048036038101906102589190611efe565b610704565b60405161026a9190611f59565b60405180910390f35b34801561027f57600080fd5b5061028861073b565b005b34801561029657600080fd5b506102b160048036038101906102ac9190612019565b610854565b6040516102be9190611f74565b60405180910390f35b3480156102d357600080fd5b506102ee60048036038101906102e9919061206c565b61088c565b6040516102fb9190611f74565b60405180910390f35b34801561031057600080fd5b506103196108d4565b6040516103269190611f74565b60405180910390f35b34801561033b57600080fd5b506103446108dc565b6040516103519190611dfd565b60405180910390f35b34801561036657600080fd5b50610381600480360381019061037c9190612099565b61096e565b60405161038f9291906120c6565b60405180910390f35b3480156103a457600080fd5b506103bf60048036038101906103ba91906120ef565b610cc1565b6040516103cd9291906120c6565b60405180910390f35b3480156103e257600080fd5b506103fd60048036038101906103f89190611efe565b611067565b60405161040a9190611f59565b60405180910390f35b34801561041f57600080fd5b5061043a60048036038101906104359190611efe565b6110de565b6040516104479190611f59565b60405180910390f35b61046a60048036038101906104659190611efe565b611101565b6040516104779190611f74565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a2919061212f565b611438565b6040516104b49190611f74565b60405180910390f35b6060600380546104cc9061219e565b80601f01602080910402602001604051908101604052809291908181526020018280546104f89061219e565b80156105455780601f1061051a57610100808354040283529160200191610545565b820191906000526020600020905b81548152906001019060200180831161052857829003601f168201915b5050505050905090565b600080600061055c6106c2565b9250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b991906121de565b602060405180830381865afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa919061220e565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161065791906121de565b602060405180830381865afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610698919061220e565b9050909192565b6000806106aa6114bf565b90506106b78185856114c7565b600191505092915050565b6000600254905090565b6000806106d76114bf565b90506106e4858285611690565b6106ef85858561171c565b60019150509392505050565b60006012905090565b60008061070f6114bf565b90506107308185856107218589611438565b61072b919061226a565b6114c7565b600191505092915050565b6000806107466106c2565b905060005b60088054905081101561084f57816107a0600883815481106107705761076f61229e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661088c565b476107ab91906122cd565b6107b5919061233e565b9250600881815481106107cb576107ca61229e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561083b573d6000803e3d6000fd5b5080806108479061236f565b91505061074b565b505050565b600080848361086391906122cd565b905060008585610873919061226a565b90508082610881919061233e565b925050509392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b6060600480546108eb9061219e565b80601f01602080910402602001604051908101604052809291908181526020018280546109179061219e565b80156109645780601f1061093957610100808354040283529160200191610964565b820191906000526020600020905b81548152906001019060200180831161094757829003601f168201915b5050505050905090565b600080600061097c3361088c565b9050808411156109c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b890612403565b60405180910390fd5b60006109cb6106c2565b90508085600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a2a91906121de565b602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b919061220e565b610a7591906122cd565b610a7f919061233e565b93508085600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ade91906121de565b602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f919061220e565b610b2991906122cd565b610b33919061233e565b9250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610b92929190612423565b6020604051808303816000875af1158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd59190612478565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610c33929190612423565b6020604051808303816000875af1158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c769190612478565b50610c813386611992565b7fdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f23386604051610cb2929190612423565b60405180910390a15050915091565b6000806000610cce6106c2565b03610cde57839150829050610e66565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d3b91906121de565b602060405180830381865afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c919061220e565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ddb91906121de565b602060405180830381865afa158015610df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1c919061220e565b9050808286610e2b91906122cd565b610e35919061233e565b9350858411610e4657849250610e63565b818187610e5391906122cd565b610e5d919061233e565b92508593505b50505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610ec5939291906124a5565b6020604051808303816000875af1158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190612478565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610f68939291906124a5565b6020604051808303816000875af1158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab9190612478565b50610fb63382611b5f565b610fbf33611cb5565b611027576008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a3382604051611058929190612423565b60405180910390a19250929050565b6000806110726114bf565b905060006110808286611438565b9050838110156110c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bc9061254e565b60405180910390fd5b6110d282868684036114c7565b60019250505092915050565b6000806110e96114bf565b90506110f681858561171c565b600191505092915050565b6000600754341015611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f906125ba565b60405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111cc57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166111f0565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506112ef848373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161122f91906121de565b602060405180830381865afa15801561124c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611270919061220e565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112a991906121de565b602060405180830381865afa1580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ea919061220e565b610854565b92508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161132e939291906124a5565b6020604051808303816000875af115801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190612478565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016113ad929190612423565b6020604051808303816000875af11580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190612478565b507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233838387876040516114289594939291906125da565b60405180910390a1505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d9061269f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c90612731565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116839190611f74565b60405180910390a3505050565b600061169c8484611438565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146117165781811015611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ff9061279d565b60405180910390fd5b61171584848484036114c7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361178b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117829061282f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f1906128c1565b60405180910390fd5b611805838383611d63565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561188b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188290612953565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119799190611f74565b60405180910390a361198c848484611d68565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f8906129e5565b60405180910390fd5b611a0d82600083611d63565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a90612a77565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b469190611f74565b60405180910390a3611b5a83600084611d68565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590612ae3565b60405180910390fd5b611bda60008383611d63565b8060026000828254611bec919061226a565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611c9d9190611f74565b60405180910390a3611cb160008383611d68565b5050565b600080600090505b600880549050811015611d58578273ffffffffffffffffffffffffffffffffffffffff1660088281548110611cf557611cf461229e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611d45576001915050611d5e565b8080611d509061236f565b915050611cbd565b50600090505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611da7578082015181840152602081019050611d8c565b60008484015250505050565b6000601f19601f8301169050919050565b6000611dcf82611d6d565b611dd98185611d78565b9350611de9818560208601611d89565b611df281611db3565b840191505092915050565b60006020820190508181036000830152611e178184611dc4565b905092915050565b6000819050919050565b611e3281611e1f565b82525050565b6000606082019050611e4d6000830186611e29565b611e5a6020830185611e29565b611e676040830184611e29565b949350505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e9f82611e74565b9050919050565b611eaf81611e94565b8114611eba57600080fd5b50565b600081359050611ecc81611ea6565b92915050565b611edb81611e1f565b8114611ee657600080fd5b50565b600081359050611ef881611ed2565b92915050565b60008060408385031215611f1557611f14611e6f565b5b6000611f2385828601611ebd565b9250506020611f3485828601611ee9565b9150509250929050565b60008115159050919050565b611f5381611f3e565b82525050565b6000602082019050611f6e6000830184611f4a565b92915050565b6000602082019050611f896000830184611e29565b92915050565b600080600060608486031215611fa857611fa7611e6f565b5b6000611fb686828701611ebd565b9350506020611fc786828701611ebd565b9250506040611fd886828701611ee9565b9150509250925092565b600060ff82169050919050565b611ff881611fe2565b82525050565b60006020820190506120136000830184611fef565b92915050565b60008060006060848603121561203257612031611e6f565b5b600061204086828701611ee9565b935050602061205186828701611ee9565b925050604061206286828701611ee9565b9150509250925092565b60006020828403121561208257612081611e6f565b5b600061209084828501611ebd565b91505092915050565b6000602082840312156120af576120ae611e6f565b5b60006120bd84828501611ee9565b91505092915050565b60006040820190506120db6000830185611e29565b6120e86020830184611e29565b9392505050565b6000806040838503121561210657612105611e6f565b5b600061211485828601611ee9565b925050602061212585828601611ee9565b9150509250929050565b6000806040838503121561214657612145611e6f565b5b600061215485828601611ebd565b925050602061216585828601611ebd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121b657607f821691505b6020821081036121c9576121c861216f565b5b50919050565b6121d881611e94565b82525050565b60006020820190506121f360008301846121cf565b92915050565b60008151905061220881611ed2565b92915050565b60006020828403121561222457612223611e6f565b5b6000612232848285016121f9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061227582611e1f565b915061228083611e1f565b92508282019050808211156122985761229761223b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006122d882611e1f565b91506122e383611e1f565b92508282026122f181611e1f565b915082820484148315176123085761230761223b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061234982611e1f565b915061235483611e1f565b9250826123645761236361230f565b5b828204905092915050565b600061237a82611e1f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123ac576123ab61223b565b5b600182019050919050565b7f62616c616e6365206973206e6f7420656e6f7567680000000000000000000000600082015250565b60006123ed601583611d78565b91506123f8826123b7565b602082019050919050565b6000602082019050818103600083015261241c816123e0565b9050919050565b600060408201905061243860008301856121cf565b6124456020830184611e29565b9392505050565b61245581611f3e565b811461246057600080fd5b50565b6000815190506124728161244c565b92915050565b60006020828403121561248e5761248d611e6f565b5b600061249c84828501612463565b91505092915050565b60006060820190506124ba60008301866121cf565b6124c760208301856121cf565b6124d46040830184611e29565b949350505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612538602583611d78565b9150612543826124dc565b604082019050919050565b600060208201905081810360008301526125678161252b565b9050919050565b7f6e6f7420656e6f75676820666565000000000000000000000000000000000000600082015250565b60006125a4600e83611d78565b91506125af8261256e565b602082019050919050565b600060208201905081810360008301526125d381612597565b9050919050565b600060a0820190506125ef60008301886121cf565b6125fc60208301876121cf565b61260960408301866121cf565b6126166060830185611e29565b6126236080830184611e29565b9695505050505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612689602483611d78565b91506126948261262d565b604082019050919050565b600060208201905081810360008301526126b88161267c565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061271b602283611d78565b9150612726826126bf565b604082019050919050565b6000602082019050818103600083015261274a8161270e565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612787601d83611d78565b915061279282612751565b602082019050919050565b600060208201905081810360008301526127b68161277a565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612819602583611d78565b9150612824826127bd565b604082019050919050565b600060208201905081810360008301526128488161280c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006128ab602383611d78565b91506128b68261284f565b604082019050919050565b600060208201905081810360008301526128da8161289e565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061293d602683611d78565b9150612948826128e1565b604082019050919050565b6000602082019050818103600083015261296c81612930565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006129cf602183611d78565b91506129da82612973565b604082019050919050565b600060208201905081810360008301526129fe816129c2565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a61602283611d78565b9150612a6c82612a05565b604082019050919050565b60006020820190508181036000830152612a9081612a54565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612acd601f83611d78565b9150612ad882612a97565b602082019050919050565b60006020820190508181036000830152612afc81612ac0565b905091905056fea26469706673582212202162cd36719bec8761e15e73f87646b5a5d9083f6889f9c88ac304203d63e10964736f6c63430008110033a26469706673582212206f1d89b7328064591750fe6d4dcb15c69a4534912150200c07142621f5b5013064736f6c63430008110033",
}

// Contract0ABI is the input ABI used to generate the binding from.
// Deprecated: Use Contract0MetaData.ABI instead.
var Contract0ABI = Contract0MetaData.ABI

// Contract0Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Contract0MetaData.Bin instead.
var Contract0Bin = Contract0MetaData.Bin

// DeployContract0 deploys a new Ethereum contract, binding an instance of Contract0 to it.
func DeployContract0(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract0, error) {
	parsed, err := Contract0MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Contract0Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract0{Contract0Caller: Contract0Caller{contract: contract}, Contract0Transactor: Contract0Transactor{contract: contract}, Contract0Filterer: Contract0Filterer{contract: contract}}, nil
}

// Contract0 is an auto generated Go binding around an Ethereum contract.
type Contract0 struct {
	Contract0Caller     // Read-only binding to the contract
	Contract0Transactor // Write-only binding to the contract
	Contract0Filterer   // Log filterer for contract events
}

// Contract0Caller is an auto generated read-only Go binding around an Ethereum contract.
type Contract0Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Contract0Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Contract0Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Contract0Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Contract0Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Contract0Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Contract0Session struct {
	Contract     *Contract0        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Contract0CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Contract0CallerSession struct {
	Contract *Contract0Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// Contract0TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Contract0TransactorSession struct {
	Contract     *Contract0Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// Contract0Raw is an auto generated low-level Go binding around an Ethereum contract.
type Contract0Raw struct {
	Contract *Contract0 // Generic contract binding to access the raw methods on
}

// Contract0CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Contract0CallerRaw struct {
	Contract *Contract0Caller // Generic read-only contract binding to access the raw methods on
}

// Contract0TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Contract0TransactorRaw struct {
	Contract *Contract0Transactor // Generic write-only contract binding to access the raw methods on
}

// NewContract0 creates a new instance of Contract0, bound to a specific deployed contract.
func NewContract0(address common.Address, backend bind.ContractBackend) (*Contract0, error) {
	contract, err := bindContract0(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract0{Contract0Caller: Contract0Caller{contract: contract}, Contract0Transactor: Contract0Transactor{contract: contract}, Contract0Filterer: Contract0Filterer{contract: contract}}, nil
}

// NewContract0Caller creates a new read-only instance of Contract0, bound to a specific deployed contract.
func NewContract0Caller(address common.Address, caller bind.ContractCaller) (*Contract0Caller, error) {
	contract, err := bindContract0(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Contract0Caller{contract: contract}, nil
}

// NewContract0Transactor creates a new write-only instance of Contract0, bound to a specific deployed contract.
func NewContract0Transactor(address common.Address, transactor bind.ContractTransactor) (*Contract0Transactor, error) {
	contract, err := bindContract0(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Contract0Transactor{contract: contract}, nil
}

// NewContract0Filterer creates a new log filterer instance of Contract0, bound to a specific deployed contract.
func NewContract0Filterer(address common.Address, filterer bind.ContractFilterer) (*Contract0Filterer, error) {
	contract, err := bindContract0(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Contract0Filterer{contract: contract}, nil
}

// bindContract0 binds a generic wrapper to an already deployed contract.
func bindContract0(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Contract0ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract0 *Contract0Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract0.Contract.Contract0Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract0 *Contract0Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract0.Contract.Contract0Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract0 *Contract0Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract0.Contract.Contract0Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract0 *Contract0CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract0.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract0 *Contract0TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract0.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract0 *Contract0TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract0.Contract.contract.Transact(opts, method, params...)
}

// Contracts is a free data retrieval call binding the contract method 0x69dc9ff3.
//
// Solidity: function contracts(address ) view returns(address)
func (_Contract0 *Contract0Caller) Contracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "contracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x69dc9ff3.
//
// Solidity: function contracts(address ) view returns(address)
func (_Contract0 *Contract0Session) Contracts(arg0 common.Address) (common.Address, error) {
	return _Contract0.Contract.Contracts(&_Contract0.CallOpts, arg0)
}

// Contracts is a free data retrieval call binding the contract method 0x69dc9ff3.
//
// Solidity: function contracts(address ) view returns(address)
func (_Contract0 *Contract0CallerSession) Contracts(arg0 common.Address) (common.Address, error) {
	return _Contract0.Contract.Contracts(&_Contract0.CallOpts, arg0)
}

// GetAddressWithName is a free data retrieval call binding the contract method 0xf66aee2d.
//
// Solidity: function getAddressWithName(string name) view returns(address)
func (_Contract0 *Contract0Caller) GetAddressWithName(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "getAddressWithName", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressWithName is a free data retrieval call binding the contract method 0xf66aee2d.
//
// Solidity: function getAddressWithName(string name) view returns(address)
func (_Contract0 *Contract0Session) GetAddressWithName(name string) (common.Address, error) {
	return _Contract0.Contract.GetAddressWithName(&_Contract0.CallOpts, name)
}

// GetAddressWithName is a free data retrieval call binding the contract method 0xf66aee2d.
//
// Solidity: function getAddressWithName(string name) view returns(address)
func (_Contract0 *Contract0CallerSession) GetAddressWithName(name string) (common.Address, error) {
	return _Contract0.Contract.GetAddressWithName(&_Contract0.CallOpts, name)
}

// GetLiquidityList is a free data retrieval call binding the contract method 0x11d4b15d.
//
// Solidity: function getLiquidityList() view returns(string[])
func (_Contract0 *Contract0Caller) GetLiquidityList(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "getLiquidityList")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLiquidityList is a free data retrieval call binding the contract method 0x11d4b15d.
//
// Solidity: function getLiquidityList() view returns(string[])
func (_Contract0 *Contract0Session) GetLiquidityList() ([]string, error) {
	return _Contract0.Contract.GetLiquidityList(&_Contract0.CallOpts)
}

// GetLiquidityList is a free data retrieval call binding the contract method 0x11d4b15d.
//
// Solidity: function getLiquidityList() view returns(string[])
func (_Contract0 *Contract0CallerSession) GetLiquidityList() ([]string, error) {
	return _Contract0.Contract.GetLiquidityList(&_Contract0.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract0 *Contract0Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract0 *Contract0Session) Owner() (common.Address, error) {
	return _Contract0.Contract.Owner(&_Contract0.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract0 *Contract0CallerSession) Owner() (common.Address, error) {
	return _Contract0.Contract.Owner(&_Contract0.CallOpts)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Contract0 *Contract0Transactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Contract0 *Contract0Session) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Contract0.Contract.ChangeOwner(&_Contract0.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Contract0 *Contract0TransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Contract0.Contract.ChangeOwner(&_Contract0.TransactOpts, _newOwner)
}

// NewLiquidity is a paid mutator transaction binding the contract method 0xc522bb80.
//
// Solidity: function newLiquidity(address _token1Address, address _token2Address) returns(address)
func (_Contract0 *Contract0Transactor) NewLiquidity(opts *bind.TransactOpts, _token1Address common.Address, _token2Address common.Address) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "newLiquidity", _token1Address, _token2Address)
}

// NewLiquidity is a paid mutator transaction binding the contract method 0xc522bb80.
//
// Solidity: function newLiquidity(address _token1Address, address _token2Address) returns(address)
func (_Contract0 *Contract0Session) NewLiquidity(_token1Address common.Address, _token2Address common.Address) (*types.Transaction, error) {
	return _Contract0.Contract.NewLiquidity(&_Contract0.TransactOpts, _token1Address, _token2Address)
}

// NewLiquidity is a paid mutator transaction binding the contract method 0xc522bb80.
//
// Solidity: function newLiquidity(address _token1Address, address _token2Address) returns(address)
func (_Contract0 *Contract0TransactorSession) NewLiquidity(_token1Address common.Address, _token2Address common.Address) (*types.Transaction, error) {
	return _Contract0.Contract.NewLiquidity(&_Contract0.TransactOpts, _token1Address, _token2Address)
}
