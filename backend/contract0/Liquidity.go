// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract0

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Contract0MetaData contains all meta data concerning the Contract0 contract.
var Contract0MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sym\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_desiredAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityOutput\",\"type\":\"uint256\"}],\"name\":\"getSwapRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260006007553480156200001657600080fd5b50604051620032c4380380620032c483398181016040528101906200003c9190620002e8565b818181600390816200004f9190620005e3565b508060049081620000619190620005e3565b50505083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620006ca565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001318262000104565b9050919050565b620001438162000124565b81146200014f57600080fd5b50565b600081519050620001638162000138565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001be8262000173565b810181811067ffffffffffffffff82111715620001e057620001df62000184565b5b80604052505050565b6000620001f5620000f0565b9050620002038282620001b3565b919050565b600067ffffffffffffffff82111562000226576200022562000184565b5b620002318262000173565b9050602081019050919050565b60005b838110156200025e57808201518184015260208101905062000241565b60008484015250505050565b6000620002816200027b8462000208565b620001e9565b905082815260208101848484011115620002a0576200029f6200016e565b5b620002ad8482856200023e565b509392505050565b600082601f830112620002cd57620002cc62000169565b5b8151620002df8482602086016200026a565b91505092915050565b60008060008060808587031215620003055762000304620000fa565b5b6000620003158782880162000152565b9450506020620003288782880162000152565b935050604085015167ffffffffffffffff8111156200034c576200034b620000ff565b5b6200035a87828801620002b5565b925050606085015167ffffffffffffffff8111156200037e576200037d620000ff565b5b6200038c87828801620002b5565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003eb57607f821691505b602082108103620004015762000400620003a3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200042c565b6200047786836200042c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004c4620004be620004b8846200048f565b62000499565b6200048f565b9050919050565b6000819050919050565b620004e083620004a3565b620004f8620004ef82620004cb565b84845462000439565b825550505050565b600090565b6200050f62000500565b6200051c818484620004d5565b505050565b5b8181101562000544576200053860008262000505565b60018101905062000522565b5050565b601f82111562000593576200055d8162000407565b62000568846200041c565b8101602085101562000578578190505b6200059062000587856200041c565b83018262000521565b50505b505050565b600082821c905092915050565b6000620005b86000198460080262000598565b1980831691505092915050565b6000620005d38383620005a5565b9150826002028217905092915050565b620005ee8262000398565b67ffffffffffffffff8111156200060a576200060962000184565b5b620006168254620003d2565b6200062382828562000548565b600060209050601f8311600181146200065b576000841562000646578287015190505b620006528582620005c5565b865550620006c2565b601f1984166200066b8662000407565b60005b8281101562000695578489015182556001820191506020850194506020810190506200066e565b86831015620006b55784890151620006b1601f891682620005a5565b8355505b6001600288020188555050505b505050505050565b612bea80620006da6000396000f3fe6080604052600436106101145760003560e01c80636f7e9362116100a05780639cd441da116100645780639cd441da146103cf578063a457c2d71461040d578063a9059cbb1461044a578063d004f0f714610487578063dd62ed3e146104b757610114565b80636f7e9362146102c157806370a08231146102fe5780637ae316d01461033b57806395d89b41146103665780639c8f9f231461039157610114565b806318160ddd116100e757806318160ddd146101da57806323b872dd14610205578063313ce56714610242578063395093511461026d57806345cbe2e7146102aa57610114565b806306fdde03146101195780630910a51014610144578063095ea7b31461017157806310fe9ae8146101ae575b600080fd5b34801561012557600080fd5b5061012e6104f4565b60405161013b9190611e85565b60405180910390f35b34801561015057600080fd5b50610159610586565b60405161016893929190611ec0565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190611f86565b6106d6565b6040516101a59190611fe1565b60405180910390f35b3480156101ba57600080fd5b506101c36106f9565b6040516101d192919061200b565b60405180910390f35b3480156101e657600080fd5b506101ef61074a565b6040516101fc9190612034565b60405180910390f35b34801561021157600080fd5b5061022c6004803603810190610227919061204f565b610754565b6040516102399190611fe1565b60405180910390f35b34801561024e57600080fd5b50610257610783565b60405161026491906120be565b60405180910390f35b34801561027957600080fd5b50610294600480360381019061028f9190611f86565b61078c565b6040516102a19190611fe1565b60405180910390f35b3480156102b657600080fd5b506102bf6107c3565b005b3480156102cd57600080fd5b506102e860048036038101906102e391906120d9565b6108dc565b6040516102f59190612034565b60405180910390f35b34801561030a57600080fd5b506103256004803603810190610320919061212c565b610914565b6040516103329190612034565b60405180910390f35b34801561034757600080fd5b5061035061095c565b60405161035d9190612034565b60405180910390f35b34801561037257600080fd5b5061037b610964565b6040516103889190611e85565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190612159565b6109f6565b6040516103c6929190612186565b60405180910390f35b3480156103db57600080fd5b506103f660048036038101906103f191906121af565b610d49565b604051610404929190612186565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f9190611f86565b6110ef565b6040516104419190611fe1565b60405180910390f35b34801561045657600080fd5b50610471600480360381019061046c9190611f86565b611166565b60405161047e9190611fe1565b60405180910390f35b6104a1600480360381019061049c9190611f86565b611189565b6040516104ae9190612034565b60405180910390f35b3480156104c357600080fd5b506104de60048036038101906104d991906121ef565b6114c0565b6040516104eb9190612034565b60405180910390f35b6060600380546105039061225e565b80601f016020809104026020016040519081016040528092919081815260200182805461052f9061225e565b801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600080600061059361074a565b9250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f0919061228f565b602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063191906122bf565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161068e919061228f565b602060405180830381865afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf91906122bf565b9050909192565b6000806106e1611547565b90506106ee81858561154f565b600191505092915050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b6000600254905090565b60008061075f611547565b905061076c858285611718565b6107778585856117a4565b60019150509392505050565b60006012905090565b600080610797611547565b90506107b88185856107a985896114c0565b6107b3919061231b565b61154f565b600191505092915050565b6000806107ce61074a565b905060005b6008805490508110156108d75781610828600883815481106107f8576107f761234f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b47610833919061237e565b61083d91906123ef565b9250600881815481106108535761085261234f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156108c3573d6000803e3d6000fd5b5080806108cf90612420565b9150506107d3565b505050565b60008084836108eb919061237e565b9050600085856108fb919061231b565b9050808261090991906123ef565b925050509392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b6060600480546109739061225e565b80601f016020809104026020016040519081016040528092919081815260200182805461099f9061225e565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b5050505050905090565b6000806000610a0433610914565b905080841115610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a40906124b4565b60405180910390fd5b6000610a5361074a565b90508085600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab2919061228f565b602060405180830381865afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af391906122bf565b610afd919061237e565b610b0791906123ef565b93508085600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b66919061228f565b602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba791906122bf565b610bb1919061237e565b610bbb91906123ef565b9250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610c1a9291906124d4565b6020604051808303816000875af1158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190612529565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610cbb9291906124d4565b6020604051808303816000875af1158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe9190612529565b50610d093386611a1a565b7fdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f23386604051610d3a9291906124d4565b60405180910390a15050915091565b6000806000610d5661074a565b03610d6657839150829050610eee565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dc3919061228f565b602060405180830381865afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0491906122bf565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e63919061228f565b602060405180830381865afa158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea491906122bf565b9050808286610eb3919061237e565b610ebd91906123ef565b9350858411610ece57849250610eeb565b818187610edb919061237e565b610ee591906123ef565b92508593505b50505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610f4d93929190612556565b6020604051808303816000875af1158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612529565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ff093929190612556565b6020604051808303816000875af115801561100f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612529565b5061103e3382611be7565b61104733611d3d565b6110af576008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a33826040516110e09291906124d4565b60405180910390a19250929050565b6000806110fa611547565b9050600061110882866114c0565b90508381101561114d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611144906125ff565b60405180910390fd5b61115a828686840361154f565b60019250505092915050565b600080611171611547565b905061117e8185856117a4565b600191505092915050565b60006007543410156111d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c79061266b565b60405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461125457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611278565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050611377848373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112b7919061228f565b602060405180830381865afa1580156112d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f891906122bf565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611331919061228f565b602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137291906122bf565b6108dc565b92508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016113b693929190612556565b6020604051808303816000875af11580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f99190612529565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016114359291906124d4565b6020604051808303816000875af1158015611454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114789190612529565b507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233838387876040516114b095949392919061268b565b60405180910390a1505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b590612750565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611624906127e2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161170b9190612034565b60405180910390a3505050565b600061172484846114c0565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461179e5781811015611790576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117879061284e565b60405180910390fd5b61179d848484840361154f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a906128e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187990612972565b60405180910390fd5b61188d838383611deb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a90612a04565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a019190612034565b60405180910390a3611a14848484611df0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8090612a96565b60405180910390fd5b611a9582600083611deb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1290612b28565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611bce9190612034565b60405180910390a3611be283600084611df0565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4d90612b94565b60405180910390fd5b611c6260008383611deb565b8060026000828254611c74919061231b565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611d259190612034565b60405180910390a3611d3960008383611df0565b5050565b600080600090505b600880549050811015611de0578273ffffffffffffffffffffffffffffffffffffffff1660088281548110611d7d57611d7c61234f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611dcd576001915050611de6565b8080611dd890612420565b915050611d45565b50600090505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e2f578082015181840152602081019050611e14565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e5782611df5565b611e618185611e00565b9350611e71818560208601611e11565b611e7a81611e3b565b840191505092915050565b60006020820190508181036000830152611e9f8184611e4c565b905092915050565b6000819050919050565b611eba81611ea7565b82525050565b6000606082019050611ed56000830186611eb1565b611ee26020830185611eb1565b611eef6040830184611eb1565b949350505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2782611efc565b9050919050565b611f3781611f1c565b8114611f4257600080fd5b50565b600081359050611f5481611f2e565b92915050565b611f6381611ea7565b8114611f6e57600080fd5b50565b600081359050611f8081611f5a565b92915050565b60008060408385031215611f9d57611f9c611ef7565b5b6000611fab85828601611f45565b9250506020611fbc85828601611f71565b9150509250929050565b60008115159050919050565b611fdb81611fc6565b82525050565b6000602082019050611ff66000830184611fd2565b92915050565b61200581611f1c565b82525050565b60006040820190506120206000830185611ffc565b61202d6020830184611ffc565b9392505050565b60006020820190506120496000830184611eb1565b92915050565b60008060006060848603121561206857612067611ef7565b5b600061207686828701611f45565b935050602061208786828701611f45565b925050604061209886828701611f71565b9150509250925092565b600060ff82169050919050565b6120b8816120a2565b82525050565b60006020820190506120d360008301846120af565b92915050565b6000806000606084860312156120f2576120f1611ef7565b5b600061210086828701611f71565b935050602061211186828701611f71565b925050604061212286828701611f71565b9150509250925092565b60006020828403121561214257612141611ef7565b5b600061215084828501611f45565b91505092915050565b60006020828403121561216f5761216e611ef7565b5b600061217d84828501611f71565b91505092915050565b600060408201905061219b6000830185611eb1565b6121a86020830184611eb1565b9392505050565b600080604083850312156121c6576121c5611ef7565b5b60006121d485828601611f71565b92505060206121e585828601611f71565b9150509250929050565b6000806040838503121561220657612205611ef7565b5b600061221485828601611f45565b925050602061222585828601611f45565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061227657607f821691505b6020821081036122895761228861222f565b5b50919050565b60006020820190506122a46000830184611ffc565b92915050565b6000815190506122b981611f5a565b92915050565b6000602082840312156122d5576122d4611ef7565b5b60006122e3848285016122aa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061232682611ea7565b915061233183611ea7565b9250828201905080821115612349576123486122ec565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061238982611ea7565b915061239483611ea7565b92508282026123a281611ea7565b915082820484148315176123b9576123b86122ec565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123fa82611ea7565b915061240583611ea7565b925082612415576124146123c0565b5b828204905092915050565b600061242b82611ea7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361245d5761245c6122ec565b5b600182019050919050565b7f62616c616e6365206973206e6f7420656e6f7567680000000000000000000000600082015250565b600061249e601583611e00565b91506124a982612468565b602082019050919050565b600060208201905081810360008301526124cd81612491565b9050919050565b60006040820190506124e96000830185611ffc565b6124f66020830184611eb1565b9392505050565b61250681611fc6565b811461251157600080fd5b50565b600081519050612523816124fd565b92915050565b60006020828403121561253f5761253e611ef7565b5b600061254d84828501612514565b91505092915050565b600060608201905061256b6000830186611ffc565b6125786020830185611ffc565b6125856040830184611eb1565b949350505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006125e9602583611e00565b91506125f48261258d565b604082019050919050565b60006020820190508181036000830152612618816125dc565b9050919050565b7f6e6f7420656e6f75676820666565000000000000000000000000000000000000600082015250565b6000612655600e83611e00565b91506126608261261f565b602082019050919050565b6000602082019050818103600083015261268481612648565b9050919050565b600060a0820190506126a06000830188611ffc565b6126ad6020830187611ffc565b6126ba6040830186611ffc565b6126c76060830185611eb1565b6126d46080830184611eb1565b9695505050505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061273a602483611e00565b9150612745826126de565b604082019050919050565b600060208201905081810360008301526127698161272d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006127cc602283611e00565b91506127d782612770565b604082019050919050565b600060208201905081810360008301526127fb816127bf565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612838601d83611e00565b915061284382612802565b602082019050919050565b600060208201905081810360008301526128678161282b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006128ca602583611e00565b91506128d58261286e565b604082019050919050565b600060208201905081810360008301526128f9816128bd565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061295c602383611e00565b915061296782612900565b604082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006129ee602683611e00565b91506129f982612992565b604082019050919050565b60006020820190508181036000830152612a1d816129e1565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a80602183611e00565b9150612a8b82612a24565b604082019050919050565b60006020820190508181036000830152612aaf81612a73565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b12602283611e00565b9150612b1d82612ab6565b604082019050919050565b60006020820190508181036000830152612b4181612b05565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612b7e601f83611e00565b9150612b8982612b48565b602082019050919050565b60006020820190508181036000830152612bad81612b71565b905091905056fea26469706673582212204b314ea3151ce15a7d26dce436cdb97b80381ccc2e6a394b98060a3de1f33d8764736f6c63430008110033",
}

// Contract0ABI is the input ABI used to generate the binding from.
// Deprecated: Use Contract0MetaData.ABI instead.
var Contract0ABI = Contract0MetaData.ABI

// Contract0Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Contract0MetaData.Bin instead.
var Contract0Bin = Contract0MetaData.Bin

// DeployContract0 deploys a new Ethereum contract, binding an instance of Contract0 to it.
func DeployContract0(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenA common.Address, _tokenB common.Address, name string, sym string) (common.Address, *types.Transaction, *Contract0, error) {
	parsed, err := Contract0MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Contract0Bin), backend, _tokenA, _tokenB, name, sym)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract0{Contract0Caller: Contract0Caller{contract: contract}, Contract0Transactor: Contract0Transactor{contract: contract}, Contract0Filterer: Contract0Filterer{contract: contract}}, nil
}

// Contract0 is an auto generated Go binding around an Ethereum contract.
type Contract0 struct {
	Contract0Caller     // Read-only binding to the contract
	Contract0Transactor // Write-only binding to the contract
	Contract0Filterer   // Log filterer for contract events
}

// Contract0Caller is an auto generated read-only Go binding around an Ethereum contract.
type Contract0Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Contract0Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Contract0Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Contract0Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Contract0Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Contract0Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Contract0Session struct {
	Contract     *Contract0        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Contract0CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Contract0CallerSession struct {
	Contract *Contract0Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// Contract0TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Contract0TransactorSession struct {
	Contract     *Contract0Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// Contract0Raw is an auto generated low-level Go binding around an Ethereum contract.
type Contract0Raw struct {
	Contract *Contract0 // Generic contract binding to access the raw methods on
}

// Contract0CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Contract0CallerRaw struct {
	Contract *Contract0Caller // Generic read-only contract binding to access the raw methods on
}

// Contract0TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Contract0TransactorRaw struct {
	Contract *Contract0Transactor // Generic write-only contract binding to access the raw methods on
}

// NewContract0 creates a new instance of Contract0, bound to a specific deployed contract.
func NewContract0(address common.Address, backend bind.ContractBackend) (*Contract0, error) {
	contract, err := bindContract0(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract0{Contract0Caller: Contract0Caller{contract: contract}, Contract0Transactor: Contract0Transactor{contract: contract}, Contract0Filterer: Contract0Filterer{contract: contract}}, nil
}

// NewContract0Caller creates a new read-only instance of Contract0, bound to a specific deployed contract.
func NewContract0Caller(address common.Address, caller bind.ContractCaller) (*Contract0Caller, error) {
	contract, err := bindContract0(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Contract0Caller{contract: contract}, nil
}

// NewContract0Transactor creates a new write-only instance of Contract0, bound to a specific deployed contract.
func NewContract0Transactor(address common.Address, transactor bind.ContractTransactor) (*Contract0Transactor, error) {
	contract, err := bindContract0(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Contract0Transactor{contract: contract}, nil
}

// NewContract0Filterer creates a new log filterer instance of Contract0, bound to a specific deployed contract.
func NewContract0Filterer(address common.Address, filterer bind.ContractFilterer) (*Contract0Filterer, error) {
	contract, err := bindContract0(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Contract0Filterer{contract: contract}, nil
}

// bindContract0 binds a generic wrapper to an already deployed contract.
func bindContract0(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Contract0ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract0 *Contract0Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract0.Contract.Contract0Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract0 *Contract0Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract0.Contract.Contract0Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract0 *Contract0Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract0.Contract.Contract0Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract0 *Contract0CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract0.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract0 *Contract0TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract0.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract0 *Contract0TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract0.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Contract0 *Contract0Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Contract0 *Contract0Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Contract0.Contract.Allowance(&_Contract0.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Contract0 *Contract0CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Contract0.Contract.Allowance(&_Contract0.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Contract0 *Contract0Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Contract0 *Contract0Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _Contract0.Contract.BalanceOf(&_Contract0.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Contract0 *Contract0CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Contract0.Contract.BalanceOf(&_Contract0.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contract0 *Contract0Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contract0 *Contract0Session) Decimals() (uint8, error) {
	return _Contract0.Contract.Decimals(&_Contract0.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Contract0 *Contract0CallerSession) Decimals() (uint8, error) {
	return _Contract0.Contract.Decimals(&_Contract0.CallOpts)
}

// GetLiquidity is a free data retrieval call binding the contract method 0x0910a510.
//
// Solidity: function getLiquidity() view returns(uint256 liquidity, uint256 amountA, uint256 amountB)
func (_Contract0 *Contract0Caller) GetLiquidity(opts *bind.CallOpts) (struct {
	Liquidity *big.Int
	AmountA   *big.Int
	AmountB   *big.Int
}, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "getLiquidity")

	outstruct := new(struct {
		Liquidity *big.Int
		AmountA   *big.Int
		AmountB   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Liquidity = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AmountA = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.AmountB = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetLiquidity is a free data retrieval call binding the contract method 0x0910a510.
//
// Solidity: function getLiquidity() view returns(uint256 liquidity, uint256 amountA, uint256 amountB)
func (_Contract0 *Contract0Session) GetLiquidity() (struct {
	Liquidity *big.Int
	AmountA   *big.Int
	AmountB   *big.Int
}, error) {
	return _Contract0.Contract.GetLiquidity(&_Contract0.CallOpts)
}

// GetLiquidity is a free data retrieval call binding the contract method 0x0910a510.
//
// Solidity: function getLiquidity() view returns(uint256 liquidity, uint256 amountA, uint256 amountB)
func (_Contract0 *Contract0CallerSession) GetLiquidity() (struct {
	Liquidity *big.Int
	AmountA   *big.Int
	AmountB   *big.Int
}, error) {
	return _Contract0.Contract.GetLiquidity(&_Contract0.CallOpts)
}

// GetSwapRatio is a free data retrieval call binding the contract method 0x6f7e9362.
//
// Solidity: function getSwapRatio(uint256 _inputAmount, uint256 _liquidityInput, uint256 _liquidityOutput) pure returns(uint256)
func (_Contract0 *Contract0Caller) GetSwapRatio(opts *bind.CallOpts, _inputAmount *big.Int, _liquidityInput *big.Int, _liquidityOutput *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "getSwapRatio", _inputAmount, _liquidityInput, _liquidityOutput)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSwapRatio is a free data retrieval call binding the contract method 0x6f7e9362.
//
// Solidity: function getSwapRatio(uint256 _inputAmount, uint256 _liquidityInput, uint256 _liquidityOutput) pure returns(uint256)
func (_Contract0 *Contract0Session) GetSwapRatio(_inputAmount *big.Int, _liquidityInput *big.Int, _liquidityOutput *big.Int) (*big.Int, error) {
	return _Contract0.Contract.GetSwapRatio(&_Contract0.CallOpts, _inputAmount, _liquidityInput, _liquidityOutput)
}

// GetSwapRatio is a free data retrieval call binding the contract method 0x6f7e9362.
//
// Solidity: function getSwapRatio(uint256 _inputAmount, uint256 _liquidityInput, uint256 _liquidityOutput) pure returns(uint256)
func (_Contract0 *Contract0CallerSession) GetSwapRatio(_inputAmount *big.Int, _liquidityInput *big.Int, _liquidityOutput *big.Int) (*big.Int, error) {
	return _Contract0.Contract.GetSwapRatio(&_Contract0.CallOpts, _inputAmount, _liquidityInput, _liquidityOutput)
}

// GetTokenAddress is a free data retrieval call binding the contract method 0x10fe9ae8.
//
// Solidity: function getTokenAddress() view returns(address, address)
func (_Contract0 *Contract0Caller) GetTokenAddress(opts *bind.CallOpts) (common.Address, common.Address, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "getTokenAddress")

	if err != nil {
		return *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return out0, out1, err

}

// GetTokenAddress is a free data retrieval call binding the contract method 0x10fe9ae8.
//
// Solidity: function getTokenAddress() view returns(address, address)
func (_Contract0 *Contract0Session) GetTokenAddress() (common.Address, common.Address, error) {
	return _Contract0.Contract.GetTokenAddress(&_Contract0.CallOpts)
}

// GetTokenAddress is a free data retrieval call binding the contract method 0x10fe9ae8.
//
// Solidity: function getTokenAddress() view returns(address, address)
func (_Contract0 *Contract0CallerSession) GetTokenAddress() (common.Address, common.Address, error) {
	return _Contract0.Contract.GetTokenAddress(&_Contract0.CallOpts)
}

// GetTotalFee is a free data retrieval call binding the contract method 0x7ae316d0.
//
// Solidity: function getTotalFee() view returns(uint256)
func (_Contract0 *Contract0Caller) GetTotalFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "getTotalFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalFee is a free data retrieval call binding the contract method 0x7ae316d0.
//
// Solidity: function getTotalFee() view returns(uint256)
func (_Contract0 *Contract0Session) GetTotalFee() (*big.Int, error) {
	return _Contract0.Contract.GetTotalFee(&_Contract0.CallOpts)
}

// GetTotalFee is a free data retrieval call binding the contract method 0x7ae316d0.
//
// Solidity: function getTotalFee() view returns(uint256)
func (_Contract0 *Contract0CallerSession) GetTotalFee() (*big.Int, error) {
	return _Contract0.Contract.GetTotalFee(&_Contract0.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract0 *Contract0Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract0 *Contract0Session) Name() (string, error) {
	return _Contract0.Contract.Name(&_Contract0.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract0 *Contract0CallerSession) Name() (string, error) {
	return _Contract0.Contract.Name(&_Contract0.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract0 *Contract0Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract0 *Contract0Session) Symbol() (string, error) {
	return _Contract0.Contract.Symbol(&_Contract0.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract0 *Contract0CallerSession) Symbol() (string, error) {
	return _Contract0.Contract.Symbol(&_Contract0.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract0 *Contract0Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract0.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract0 *Contract0Session) TotalSupply() (*big.Int, error) {
	return _Contract0.Contract.TotalSupply(&_Contract0.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract0 *Contract0CallerSession) TotalSupply() (*big.Int, error) {
	return _Contract0.Contract.TotalSupply(&_Contract0.CallOpts)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x9cd441da.
//
// Solidity: function addLiquidity(uint256 _desiredAmountA, uint256 _desiredAmountB) returns(uint256 actualAmountA, uint256 actualAmountB)
func (_Contract0 *Contract0Transactor) AddLiquidity(opts *bind.TransactOpts, _desiredAmountA *big.Int, _desiredAmountB *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "addLiquidity", _desiredAmountA, _desiredAmountB)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x9cd441da.
//
// Solidity: function addLiquidity(uint256 _desiredAmountA, uint256 _desiredAmountB) returns(uint256 actualAmountA, uint256 actualAmountB)
func (_Contract0 *Contract0Session) AddLiquidity(_desiredAmountA *big.Int, _desiredAmountB *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.AddLiquidity(&_Contract0.TransactOpts, _desiredAmountA, _desiredAmountB)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x9cd441da.
//
// Solidity: function addLiquidity(uint256 _desiredAmountA, uint256 _desiredAmountB) returns(uint256 actualAmountA, uint256 actualAmountB)
func (_Contract0 *Contract0TransactorSession) AddLiquidity(_desiredAmountA *big.Int, _desiredAmountB *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.AddLiquidity(&_Contract0.TransactOpts, _desiredAmountA, _desiredAmountB)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contract0 *Contract0Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contract0 *Contract0Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.Approve(&_Contract0.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Contract0 *Contract0TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.Approve(&_Contract0.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Contract0 *Contract0Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Contract0 *Contract0Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.DecreaseAllowance(&_Contract0.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Contract0 *Contract0TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.DecreaseAllowance(&_Contract0.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Contract0 *Contract0Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Contract0 *Contract0Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.IncreaseAllowance(&_Contract0.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Contract0 *Contract0TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.IncreaseAllowance(&_Contract0.TransactOpts, spender, addedValue)
}

// PullReward is a paid mutator transaction binding the contract method 0x45cbe2e7.
//
// Solidity: function pullReward() returns()
func (_Contract0 *Contract0Transactor) PullReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "pullReward")
}

// PullReward is a paid mutator transaction binding the contract method 0x45cbe2e7.
//
// Solidity: function pullReward() returns()
func (_Contract0 *Contract0Session) PullReward() (*types.Transaction, error) {
	return _Contract0.Contract.PullReward(&_Contract0.TransactOpts)
}

// PullReward is a paid mutator transaction binding the contract method 0x45cbe2e7.
//
// Solidity: function pullReward() returns()
func (_Contract0 *Contract0TransactorSession) PullReward() (*types.Transaction, error) {
	return _Contract0.Contract.PullReward(&_Contract0.TransactOpts)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0x9c8f9f23.
//
// Solidity: function removeLiquidity(uint256 _amount) returns(uint256 outputA, uint256 outputB)
func (_Contract0 *Contract0Transactor) RemoveLiquidity(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "removeLiquidity", _amount)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0x9c8f9f23.
//
// Solidity: function removeLiquidity(uint256 _amount) returns(uint256 outputA, uint256 outputB)
func (_Contract0 *Contract0Session) RemoveLiquidity(_amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.RemoveLiquidity(&_Contract0.TransactOpts, _amount)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0x9c8f9f23.
//
// Solidity: function removeLiquidity(uint256 _amount) returns(uint256 outputA, uint256 outputB)
func (_Contract0 *Contract0TransactorSession) RemoveLiquidity(_amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.RemoveLiquidity(&_Contract0.TransactOpts, _amount)
}

// Swap is a paid mutator transaction binding the contract method 0xd004f0f7.
//
// Solidity: function swap(address _inputToken, uint256 _inputAmount) payable returns(uint256 outputAmount)
func (_Contract0 *Contract0Transactor) Swap(opts *bind.TransactOpts, _inputToken common.Address, _inputAmount *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "swap", _inputToken, _inputAmount)
}

// Swap is a paid mutator transaction binding the contract method 0xd004f0f7.
//
// Solidity: function swap(address _inputToken, uint256 _inputAmount) payable returns(uint256 outputAmount)
func (_Contract0 *Contract0Session) Swap(_inputToken common.Address, _inputAmount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.Swap(&_Contract0.TransactOpts, _inputToken, _inputAmount)
}

// Swap is a paid mutator transaction binding the contract method 0xd004f0f7.
//
// Solidity: function swap(address _inputToken, uint256 _inputAmount) payable returns(uint256 outputAmount)
func (_Contract0 *Contract0TransactorSession) Swap(_inputToken common.Address, _inputAmount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.Swap(&_Contract0.TransactOpts, _inputToken, _inputAmount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Contract0 *Contract0Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Contract0 *Contract0Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.Transfer(&_Contract0.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Contract0 *Contract0TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.Transfer(&_Contract0.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Contract0 *Contract0Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Contract0 *Contract0Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.TransferFrom(&_Contract0.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Contract0 *Contract0TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Contract0.Contract.TransferFrom(&_Contract0.TransactOpts, from, to, amount)
}

// Contract0AddLiquidityIterator is returned from FilterAddLiquidity and is used to iterate over the raw logs and unpacked data for AddLiquidity events raised by the Contract0 contract.
type Contract0AddLiquidityIterator struct {
	Event *Contract0AddLiquidity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Contract0AddLiquidityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Contract0AddLiquidity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Contract0AddLiquidity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Contract0AddLiquidityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Contract0AddLiquidityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Contract0AddLiquidity represents a AddLiquidity event raised by the Contract0 contract.
type Contract0AddLiquidity struct {
	Caller common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddLiquidity is a free log retrieval operation binding the contract event 0xbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a.
//
// Solidity: event AddLiquidity(address caller, uint256 amount)
func (_Contract0 *Contract0Filterer) FilterAddLiquidity(opts *bind.FilterOpts) (*Contract0AddLiquidityIterator, error) {

	logs, sub, err := _Contract0.contract.FilterLogs(opts, "AddLiquidity")
	if err != nil {
		return nil, err
	}
	return &Contract0AddLiquidityIterator{contract: _Contract0.contract, event: "AddLiquidity", logs: logs, sub: sub}, nil
}

// WatchAddLiquidity is a free log subscription operation binding the contract event 0xbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a.
//
// Solidity: event AddLiquidity(address caller, uint256 amount)
func (_Contract0 *Contract0Filterer) WatchAddLiquidity(opts *bind.WatchOpts, sink chan<- *Contract0AddLiquidity) (event.Subscription, error) {

	logs, sub, err := _Contract0.contract.WatchLogs(opts, "AddLiquidity")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Contract0AddLiquidity)
				if err := _Contract0.contract.UnpackLog(event, "AddLiquidity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddLiquidity is a log parse operation binding the contract event 0xbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a.
//
// Solidity: event AddLiquidity(address caller, uint256 amount)
func (_Contract0 *Contract0Filterer) ParseAddLiquidity(log types.Log) (*Contract0AddLiquidity, error) {
	event := new(Contract0AddLiquidity)
	if err := _Contract0.contract.UnpackLog(event, "AddLiquidity", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Contract0ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contract0 contract.
type Contract0ApprovalIterator struct {
	Event *Contract0Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Contract0ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Contract0Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Contract0Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Contract0ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Contract0ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Contract0Approval represents a Approval event raised by the Contract0 contract.
type Contract0Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contract0 *Contract0Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*Contract0ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contract0.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &Contract0ApprovalIterator{contract: _Contract0.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contract0 *Contract0Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *Contract0Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Contract0.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Contract0Approval)
				if err := _Contract0.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Contract0 *Contract0Filterer) ParseApproval(log types.Log) (*Contract0Approval, error) {
	event := new(Contract0Approval)
	if err := _Contract0.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Contract0RemoveLiquidityIterator is returned from FilterRemoveLiquidity and is used to iterate over the raw logs and unpacked data for RemoveLiquidity events raised by the Contract0 contract.
type Contract0RemoveLiquidityIterator struct {
	Event *Contract0RemoveLiquidity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Contract0RemoveLiquidityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Contract0RemoveLiquidity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Contract0RemoveLiquidity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Contract0RemoveLiquidityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Contract0RemoveLiquidityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Contract0RemoveLiquidity represents a RemoveLiquidity event raised by the Contract0 contract.
type Contract0RemoveLiquidity struct {
	Caller common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveLiquidity is a free log retrieval operation binding the contract event 0xdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f2.
//
// Solidity: event RemoveLiquidity(address caller, uint256 amount)
func (_Contract0 *Contract0Filterer) FilterRemoveLiquidity(opts *bind.FilterOpts) (*Contract0RemoveLiquidityIterator, error) {

	logs, sub, err := _Contract0.contract.FilterLogs(opts, "RemoveLiquidity")
	if err != nil {
		return nil, err
	}
	return &Contract0RemoveLiquidityIterator{contract: _Contract0.contract, event: "RemoveLiquidity", logs: logs, sub: sub}, nil
}

// WatchRemoveLiquidity is a free log subscription operation binding the contract event 0xdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f2.
//
// Solidity: event RemoveLiquidity(address caller, uint256 amount)
func (_Contract0 *Contract0Filterer) WatchRemoveLiquidity(opts *bind.WatchOpts, sink chan<- *Contract0RemoveLiquidity) (event.Subscription, error) {

	logs, sub, err := _Contract0.contract.WatchLogs(opts, "RemoveLiquidity")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Contract0RemoveLiquidity)
				if err := _Contract0.contract.UnpackLog(event, "RemoveLiquidity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveLiquidity is a log parse operation binding the contract event 0xdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f2.
//
// Solidity: event RemoveLiquidity(address caller, uint256 amount)
func (_Contract0 *Contract0Filterer) ParseRemoveLiquidity(log types.Log) (*Contract0RemoveLiquidity, error) {
	event := new(Contract0RemoveLiquidity)
	if err := _Contract0.contract.UnpackLog(event, "RemoveLiquidity", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Contract0SwapIterator is returned from FilterSwap and is used to iterate over the raw logs and unpacked data for Swap events raised by the Contract0 contract.
type Contract0SwapIterator struct {
	Event *Contract0Swap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Contract0SwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Contract0Swap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Contract0Swap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Contract0SwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Contract0SwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Contract0Swap represents a Swap event raised by the Contract0 contract.
type Contract0Swap struct {
	Caller       common.Address
	Input        common.Address
	Output       common.Address
	InputAmount  *big.Int
	OutputAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSwap is a free log retrieval operation binding the contract event 0xcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062.
//
// Solidity: event Swap(address caller, address input, address output, uint256 inputAmount, uint256 outputAmount)
func (_Contract0 *Contract0Filterer) FilterSwap(opts *bind.FilterOpts) (*Contract0SwapIterator, error) {

	logs, sub, err := _Contract0.contract.FilterLogs(opts, "Swap")
	if err != nil {
		return nil, err
	}
	return &Contract0SwapIterator{contract: _Contract0.contract, event: "Swap", logs: logs, sub: sub}, nil
}

// WatchSwap is a free log subscription operation binding the contract event 0xcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062.
//
// Solidity: event Swap(address caller, address input, address output, uint256 inputAmount, uint256 outputAmount)
func (_Contract0 *Contract0Filterer) WatchSwap(opts *bind.WatchOpts, sink chan<- *Contract0Swap) (event.Subscription, error) {

	logs, sub, err := _Contract0.contract.WatchLogs(opts, "Swap")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Contract0Swap)
				if err := _Contract0.contract.UnpackLog(event, "Swap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwap is a log parse operation binding the contract event 0xcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062.
//
// Solidity: event Swap(address caller, address input, address output, uint256 inputAmount, uint256 outputAmount)
func (_Contract0 *Contract0Filterer) ParseSwap(log types.Log) (*Contract0Swap, error) {
	event := new(Contract0Swap)
	if err := _Contract0.contract.UnpackLog(event, "Swap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Contract0TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contract0 contract.
type Contract0TransferIterator struct {
	Event *Contract0Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Contract0TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Contract0Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Contract0Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Contract0TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Contract0TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Contract0Transfer represents a Transfer event raised by the Contract0 contract.
type Contract0Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contract0 *Contract0Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Contract0TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract0.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Contract0TransferIterator{contract: _Contract0.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contract0 *Contract0Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *Contract0Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract0.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Contract0Transfer)
				if err := _Contract0.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Contract0 *Contract0Filterer) ParseTransfer(log types.Log) (*Contract0Transfer, error) {
	event := new(Contract0Transfer)
	if err := _Contract0.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
