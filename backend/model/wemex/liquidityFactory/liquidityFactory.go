// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package liquidityFactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LiquidityFactoryMetaData contains all meta data concerning the LiquidityFactory contract.
var LiquidityFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"contractLiquidity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAddressWithName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2Address\",\"type\":\"address\"}],\"name\":\"newLiquidity\",\"outputs\":[{\"internalType\":\"contractLiquidity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506147d3806100606000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806311d4b15d146200006f57806369dc9ff314620000915780638da5cb5b14620000c7578063a6f9dae114620000e9578063c522bb801462000109578063f66aee2d146200013f575b600080fd5b6200007962000175565b60405162000088919062000ada565b60405180910390f35b620000af6004803603810190620000a9919062000b77565b62000258565b604051620000be919062000c14565b60405180910390f35b620000d16200028b565b604051620000e0919062000c42565b60405180910390f35b62000107600480360381019062000101919062000b77565b620002af565b005b62000127600480360381019062000121919062000c5f565b62000385565b60405162000136919062000c14565b60405180910390f35b6200015d600480360381019062000157919062000df7565b620006d3565b6040516200016c919062000c42565b60405180910390f35b60606003805480602002602001604051908101604052809291908181526020016000905b828210156200024f578382906000526020600020018054620001bb9062000e77565b80601f0160208091040260200160405190810160405280929190818152602001828054620001e99062000e77565b80156200023a5780601f106200020e576101008083540402835291602001916200023a565b820191906000526020600020905b8154815290600101906020018083116200021c57829003601f168201915b50505050508152602001906001019062000199565b50505050905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003389062000f0d565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200041a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004119062000f0d565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000468573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000493919062000fad565b905060008473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200050e919062000fad565b9050600082826040516020016200052792919062001071565b604051602081830303815290604052905060006200054a6003805490506200071d565b6040516020016200055c9190620010d0565b6040516020818303038152906040529050600088888484604051620005819062000962565b6200059094939291906200113b565b604051809103906000f080158015620005ad573d6000803e3d6000fd5b509050600383908060018154018082558091505060019003906000526020600020016000909190919091509081620005e6919062001368565b5080600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028460405162000678919062001491565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080965050505050505092915050565b6000600282604051620006e7919062001491565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600060016200072e84620007f6565b01905060008167ffffffffffffffff81111562000750576200074f62000cb0565b5b6040519080825280601f01601f191660200182016040528015620007835781602001600182028036833780820191505090505b509050600082602001820190505b600115620007eb578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581620007de57620007dd620014aa565b5b0494506000850362000791575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062000858577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816200084e576200084d620014aa565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831062000899576d04ee2d6d415b85acef810000000083816200088f576200088e620014aa565b5b0492506020810190505b662386f26fc100008310620008cc57662386f26fc100008381620008c257620008c1620014aa565b5b0492506010810190505b6305f5e1008310620008f9576305f5e1008381620008ef57620008ee620014aa565b5b0492506008810190505b612710831062000922576127108381620009185762000917620014aa565b5b0492506004810190505b606483106200094957606483816200093f576200093e620014aa565b5b0492506002810190505b600a831062000959576001810190505b80915050919050565b6132c480620014da83390190565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620009d8578082015181840152602081019050620009bb565b60008484015250505050565b6000601f19601f8301169050919050565b600062000a02826200099c565b62000a0e8185620009a7565b935062000a20818560208601620009b8565b62000a2b81620009e4565b840191505092915050565b600062000a448383620009f5565b905092915050565b6000602082019050919050565b600062000a668262000970565b62000a7281856200097b565b93508360208202850162000a86856200098c565b8060005b8581101562000ac8578484038952815162000aa6858262000a36565b945062000ab38362000a4c565b925060208a0199505060018101905062000a8a565b50829750879550505050505092915050565b6000602082019050818103600083015262000af6818462000a59565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b3f8262000b12565b9050919050565b62000b518162000b32565b811462000b5d57600080fd5b50565b60008135905062000b718162000b46565b92915050565b60006020828403121562000b905762000b8f62000b08565b5b600062000ba08482850162000b60565b91505092915050565b6000819050919050565b600062000bd462000bce62000bc88462000b12565b62000ba9565b62000b12565b9050919050565b600062000be88262000bb3565b9050919050565b600062000bfc8262000bdb565b9050919050565b62000c0e8162000bef565b82525050565b600060208201905062000c2b600083018462000c03565b92915050565b62000c3c8162000b32565b82525050565b600060208201905062000c59600083018462000c31565b92915050565b6000806040838503121562000c795762000c7862000b08565b5b600062000c898582860162000b60565b925050602062000c9c8582860162000b60565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000cea82620009e4565b810181811067ffffffffffffffff8211171562000d0c5762000d0b62000cb0565b5b80604052505050565b600062000d2162000afe565b905062000d2f828262000cdf565b919050565b600067ffffffffffffffff82111562000d525762000d5162000cb0565b5b62000d5d82620009e4565b9050602081019050919050565b82818337600083830152505050565b600062000d9062000d8a8462000d34565b62000d15565b90508281526020810184848401111562000daf5762000dae62000cab565b5b62000dbc84828562000d6a565b509392505050565b600082601f83011262000ddc5762000ddb62000ca6565b5b813562000dee84826020860162000d79565b91505092915050565b60006020828403121562000e105762000e0f62000b08565b5b600082013567ffffffffffffffff81111562000e315762000e3062000b0d565b5b62000e3f8482850162000dc4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000e9057607f821691505b60208210810362000ea65762000ea562000e48565b5b50919050565b600082825260208201905092915050565b7f53656e646572206e6f7420617574686f72697a65642e00000000000000000000600082015250565b600062000ef560168362000eac565b915062000f028262000ebd565b602082019050919050565b6000602082019050818103600083015262000f288162000ee6565b9050919050565b600062000f4662000f408462000d34565b62000d15565b90508281526020810184848401111562000f655762000f6462000cab565b5b62000f72848285620009b8565b509392505050565b600082601f83011262000f925762000f9162000ca6565b5b815162000fa484826020860162000f2f565b91505092915050565b60006020828403121562000fc65762000fc562000b08565b5b600082015167ffffffffffffffff81111562000fe75762000fe662000b0d565b5b62000ff58482850162000f7a565b91505092915050565b600081519050919050565b600081905092915050565b6000620010218262000ffe565b6200102d818562001009565b93506200103f818560208601620009b8565b80840191505092915050565b7f2d00000000000000000000000000000000000000000000000000000000000000815250565b60006200107f828562001014565b91506200108c826200104b565b6001820191506200109e828462001014565b91508190509392505050565b7f57454d45582d0000000000000000000000000000000000000000000000000000815250565b6000620010dd82620010aa565b600682019150620010ef828462001014565b915081905092915050565b600062001107826200099c565b62001113818562000eac565b935062001125818560208601620009b8565b6200113081620009e4565b840191505092915050565b600060808201905062001152600083018762000c31565b62001161602083018662000c31565b8181036040830152620011758185620010fa565b905081810360608301526200118b8184620010fa565b905095945050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620011fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620011bb565b620012068683620011bb565b95508019841693508086168417925050509392505050565b6000819050919050565b600062001249620012436200123d846200121e565b62000ba9565b6200121e565b9050919050565b6000819050919050565b620012658362001228565b6200127d620012748262001250565b848454620011c8565b825550505050565b600090565b6200129462001285565b620012a18184846200125a565b505050565b5b81811015620012c957620012bd6000826200128a565b600181019050620012a7565b5050565b601f8211156200131857620012e28162001196565b620012ed84620011ab565b81016020851015620012fd578190505b620013156200130c85620011ab565b830182620012a6565b50505b505050565b600082821c905092915050565b60006200133d600019846008026200131d565b1980831691505092915050565b60006200135883836200132a565b9150826002028217905092915050565b62001373826200099c565b67ffffffffffffffff8111156200138f576200138e62000cb0565b5b6200139b825462000e77565b620013a8828285620012cd565b600060209050601f831160018114620013e05760008415620013cb578287015190505b620013d785826200134a565b86555062001447565b601f198416620013f08662001196565b60005b828110156200141a57848901518255600182019150602085019450602081019050620013f3565b868310156200143a578489015162001436601f8916826200132a565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600062001467826200099c565b6200147381856200144f565b935062001485818560208601620009b8565b80840191505092915050565b60006200149f82846200145a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe608060405260006007553480156200001657600080fd5b50604051620032c4380380620032c483398181016040528101906200003c9190620002e8565b818181600390816200004f9190620005e3565b508060049081620000619190620005e3565b50505083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620006ca565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001318262000104565b9050919050565b620001438162000124565b81146200014f57600080fd5b50565b600081519050620001638162000138565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001be8262000173565b810181811067ffffffffffffffff82111715620001e057620001df62000184565b5b80604052505050565b6000620001f5620000f0565b9050620002038282620001b3565b919050565b600067ffffffffffffffff82111562000226576200022562000184565b5b620002318262000173565b9050602081019050919050565b60005b838110156200025e57808201518184015260208101905062000241565b60008484015250505050565b6000620002816200027b8462000208565b620001e9565b905082815260208101848484011115620002a0576200029f6200016e565b5b620002ad8482856200023e565b509392505050565b600082601f830112620002cd57620002cc62000169565b5b8151620002df8482602086016200026a565b91505092915050565b60008060008060808587031215620003055762000304620000fa565b5b6000620003158782880162000152565b9450506020620003288782880162000152565b935050604085015167ffffffffffffffff8111156200034c576200034b620000ff565b5b6200035a87828801620002b5565b925050606085015167ffffffffffffffff8111156200037e576200037d620000ff565b5b6200038c87828801620002b5565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003eb57607f821691505b602082108103620004015762000400620003a3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200042c565b6200047786836200042c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004c4620004be620004b8846200048f565b62000499565b6200048f565b9050919050565b6000819050919050565b620004e083620004a3565b620004f8620004ef82620004cb565b84845462000439565b825550505050565b600090565b6200050f62000500565b6200051c818484620004d5565b505050565b5b8181101562000544576200053860008262000505565b60018101905062000522565b5050565b601f82111562000593576200055d8162000407565b62000568846200041c565b8101602085101562000578578190505b6200059062000587856200041c565b83018262000521565b50505b505050565b600082821c905092915050565b6000620005b86000198460080262000598565b1980831691505092915050565b6000620005d38383620005a5565b9150826002028217905092915050565b620005ee8262000398565b67ffffffffffffffff8111156200060a576200060962000184565b5b620006168254620003d2565b6200062382828562000548565b600060209050601f8311600181146200065b576000841562000646578287015190505b620006528582620005c5565b865550620006c2565b601f1984166200066b8662000407565b60005b8281101562000695578489015182556001820191506020850194506020810190506200066e565b86831015620006b55784890151620006b1601f891682620005a5565b8355505b6001600288020188555050505b505050505050565b612bea80620006da6000396000f3fe6080604052600436106101145760003560e01c80636f7e9362116100a05780639cd441da116100645780639cd441da146103cf578063a457c2d71461040d578063a9059cbb1461044a578063d004f0f714610487578063dd62ed3e146104b757610114565b80636f7e9362146102c157806370a08231146102fe5780637ae316d01461033b57806395d89b41146103665780639c8f9f231461039157610114565b806318160ddd116100e757806318160ddd146101da57806323b872dd14610205578063313ce56714610242578063395093511461026d57806345cbe2e7146102aa57610114565b806306fdde03146101195780630910a51014610144578063095ea7b31461017157806310fe9ae8146101ae575b600080fd5b34801561012557600080fd5b5061012e6104f4565b60405161013b9190611e85565b60405180910390f35b34801561015057600080fd5b50610159610586565b60405161016893929190611ec0565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190611f86565b6106d6565b6040516101a59190611fe1565b60405180910390f35b3480156101ba57600080fd5b506101c36106f9565b6040516101d192919061200b565b60405180910390f35b3480156101e657600080fd5b506101ef61074a565b6040516101fc9190612034565b60405180910390f35b34801561021157600080fd5b5061022c6004803603810190610227919061204f565b610754565b6040516102399190611fe1565b60405180910390f35b34801561024e57600080fd5b50610257610783565b60405161026491906120be565b60405180910390f35b34801561027957600080fd5b50610294600480360381019061028f9190611f86565b61078c565b6040516102a19190611fe1565b60405180910390f35b3480156102b657600080fd5b506102bf6107c3565b005b3480156102cd57600080fd5b506102e860048036038101906102e391906120d9565b6108dc565b6040516102f59190612034565b60405180910390f35b34801561030a57600080fd5b506103256004803603810190610320919061212c565b610914565b6040516103329190612034565b60405180910390f35b34801561034757600080fd5b5061035061095c565b60405161035d9190612034565b60405180910390f35b34801561037257600080fd5b5061037b610964565b6040516103889190611e85565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190612159565b6109f6565b6040516103c6929190612186565b60405180910390f35b3480156103db57600080fd5b506103f660048036038101906103f191906121af565b610d49565b604051610404929190612186565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f9190611f86565b6110ef565b6040516104419190611fe1565b60405180910390f35b34801561045657600080fd5b50610471600480360381019061046c9190611f86565b611166565b60405161047e9190611fe1565b60405180910390f35b6104a1600480360381019061049c9190611f86565b611189565b6040516104ae9190612034565b60405180910390f35b3480156104c357600080fd5b506104de60048036038101906104d991906121ef565b6114c0565b6040516104eb9190612034565b60405180910390f35b6060600380546105039061225e565b80601f016020809104026020016040519081016040528092919081815260200182805461052f9061225e565b801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b5050505050905090565b600080600061059361074a565b9250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f0919061228f565b602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063191906122bf565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161068e919061228f565b602060405180830381865afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf91906122bf565b9050909192565b6000806106e1611547565b90506106ee81858561154f565b600191505092915050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b6000600254905090565b60008061075f611547565b905061076c858285611718565b6107778585856117a4565b60019150509392505050565b60006012905090565b600080610797611547565b90506107b88185856107a985896114c0565b6107b3919061231b565b61154f565b600191505092915050565b6000806107ce61074a565b905060005b6008805490508110156108d75781610828600883815481106107f8576107f761234f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610914565b47610833919061237e565b61083d91906123ef565b9250600881815481106108535761085261234f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156108c3573d6000803e3d6000fd5b5080806108cf90612420565b9150506107d3565b505050565b60008084836108eb919061237e565b9050600085856108fb919061231b565b9050808261090991906123ef565b925050509392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b6060600480546109739061225e565b80601f016020809104026020016040519081016040528092919081815260200182805461099f9061225e565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b5050505050905090565b6000806000610a0433610914565b905080841115610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a40906124b4565b60405180910390fd5b6000610a5361074a565b90508085600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab2919061228f565b602060405180830381865afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af391906122bf565b610afd919061237e565b610b0791906123ef565b93508085600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b66919061228f565b602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba791906122bf565b610bb1919061237e565b610bbb91906123ef565b9250600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610c1a9291906124d4565b6020604051808303816000875af1158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190612529565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610cbb9291906124d4565b6020604051808303816000875af1158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe9190612529565b50610d093386611a1a565b7fdfdd120ded9b7afc0c23dd5310e93aaa3e1c3b9f75af9b805fab3030842439f23386604051610d3a9291906124d4565b60405180910390a15050915091565b6000806000610d5661074a565b03610d6657839150829050610eee565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dc3919061228f565b602060405180830381865afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0491906122bf565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e63919061228f565b602060405180830381865afa158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea491906122bf565b9050808286610eb3919061237e565b610ebd91906123ef565b9350858411610ece57849250610eeb565b818187610edb919061237e565b610ee591906123ef565b92508593505b50505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610f4d93929190612556565b6020604051808303816000875af1158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190612529565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ff093929190612556565b6020604051808303816000875af115801561100f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612529565b5061103e3382611be7565b61104733611d3d565b6110af576008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fbb37879e252460856212dc4e8c6edf174e473df9423e3a7feccd21f8c28d587a33826040516110e09291906124d4565b60405180910390a19250929050565b6000806110fa611547565b9050600061110882866114c0565b90508381101561114d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611144906125ff565b60405180910390fd5b61115a828686840361154f565b60019250505092915050565b600080611171611547565b905061117e8185856117a4565b600191505092915050565b60006007543410156111d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c79061266b565b60405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461125457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611278565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050611377848373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112b7919061228f565b602060405180830381865afa1580156112d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f891906122bf565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611331919061228f565b602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137291906122bf565b6108dc565b92508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016113b693929190612556565b6020604051808303816000875af11580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f99190612529565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016114359291906124d4565b6020604051808303816000875af1158015611454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114789190612529565b507fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606233838387876040516114b095949392919061268b565b60405180910390a1505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b590612750565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611624906127e2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161170b9190612034565b60405180910390a3505050565b600061172484846114c0565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461179e5781811015611790576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117879061284e565b60405180910390fd5b61179d848484840361154f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a906128e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187990612972565b60405180910390fd5b61188d838383611deb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a90612a04565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a019190612034565b60405180910390a3611a14848484611df0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8090612a96565b60405180910390fd5b611a9582600083611deb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1290612b28565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611bce9190612034565b60405180910390a3611be283600084611df0565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4d90612b94565b60405180910390fd5b611c6260008383611deb565b8060026000828254611c74919061231b565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611d259190612034565b60405180910390a3611d3960008383611df0565b5050565b600080600090505b600880549050811015611de0578273ffffffffffffffffffffffffffffffffffffffff1660088281548110611d7d57611d7c61234f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611dcd576001915050611de6565b8080611dd890612420565b915050611d45565b50600090505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e2f578082015181840152602081019050611e14565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e5782611df5565b611e618185611e00565b9350611e71818560208601611e11565b611e7a81611e3b565b840191505092915050565b60006020820190508181036000830152611e9f8184611e4c565b905092915050565b6000819050919050565b611eba81611ea7565b82525050565b6000606082019050611ed56000830186611eb1565b611ee26020830185611eb1565b611eef6040830184611eb1565b949350505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2782611efc565b9050919050565b611f3781611f1c565b8114611f4257600080fd5b50565b600081359050611f5481611f2e565b92915050565b611f6381611ea7565b8114611f6e57600080fd5b50565b600081359050611f8081611f5a565b92915050565b60008060408385031215611f9d57611f9c611ef7565b5b6000611fab85828601611f45565b9250506020611fbc85828601611f71565b9150509250929050565b60008115159050919050565b611fdb81611fc6565b82525050565b6000602082019050611ff66000830184611fd2565b92915050565b61200581611f1c565b82525050565b60006040820190506120206000830185611ffc565b61202d6020830184611ffc565b9392505050565b60006020820190506120496000830184611eb1565b92915050565b60008060006060848603121561206857612067611ef7565b5b600061207686828701611f45565b935050602061208786828701611f45565b925050604061209886828701611f71565b9150509250925092565b600060ff82169050919050565b6120b8816120a2565b82525050565b60006020820190506120d360008301846120af565b92915050565b6000806000606084860312156120f2576120f1611ef7565b5b600061210086828701611f71565b935050602061211186828701611f71565b925050604061212286828701611f71565b9150509250925092565b60006020828403121561214257612141611ef7565b5b600061215084828501611f45565b91505092915050565b60006020828403121561216f5761216e611ef7565b5b600061217d84828501611f71565b91505092915050565b600060408201905061219b6000830185611eb1565b6121a86020830184611eb1565b9392505050565b600080604083850312156121c6576121c5611ef7565b5b60006121d485828601611f71565b92505060206121e585828601611f71565b9150509250929050565b6000806040838503121561220657612205611ef7565b5b600061221485828601611f45565b925050602061222585828601611f45565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061227657607f821691505b6020821081036122895761228861222f565b5b50919050565b60006020820190506122a46000830184611ffc565b92915050565b6000815190506122b981611f5a565b92915050565b6000602082840312156122d5576122d4611ef7565b5b60006122e3848285016122aa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061232682611ea7565b915061233183611ea7565b9250828201905080821115612349576123486122ec565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061238982611ea7565b915061239483611ea7565b92508282026123a281611ea7565b915082820484148315176123b9576123b86122ec565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123fa82611ea7565b915061240583611ea7565b925082612415576124146123c0565b5b828204905092915050565b600061242b82611ea7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361245d5761245c6122ec565b5b600182019050919050565b7f62616c616e6365206973206e6f7420656e6f7567680000000000000000000000600082015250565b600061249e601583611e00565b91506124a982612468565b602082019050919050565b600060208201905081810360008301526124cd81612491565b9050919050565b60006040820190506124e96000830185611ffc565b6124f66020830184611eb1565b9392505050565b61250681611fc6565b811461251157600080fd5b50565b600081519050612523816124fd565b92915050565b60006020828403121561253f5761253e611ef7565b5b600061254d84828501612514565b91505092915050565b600060608201905061256b6000830186611ffc565b6125786020830185611ffc565b6125856040830184611eb1565b949350505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006125e9602583611e00565b91506125f48261258d565b604082019050919050565b60006020820190508181036000830152612618816125dc565b9050919050565b7f6e6f7420656e6f75676820666565000000000000000000000000000000000000600082015250565b6000612655600e83611e00565b91506126608261261f565b602082019050919050565b6000602082019050818103600083015261268481612648565b9050919050565b600060a0820190506126a06000830188611ffc565b6126ad6020830187611ffc565b6126ba6040830186611ffc565b6126c76060830185611eb1565b6126d46080830184611eb1565b9695505050505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061273a602483611e00565b9150612745826126de565b604082019050919050565b600060208201905081810360008301526127698161272d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006127cc602283611e00565b91506127d782612770565b604082019050919050565b600060208201905081810360008301526127fb816127bf565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612838601d83611e00565b915061284382612802565b602082019050919050565b600060208201905081810360008301526128678161282b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006128ca602583611e00565b91506128d58261286e565b604082019050919050565b600060208201905081810360008301526128f9816128bd565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061295c602383611e00565b915061296782612900565b604082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006129ee602683611e00565b91506129f982612992565b604082019050919050565b60006020820190508181036000830152612a1d816129e1565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a80602183611e00565b9150612a8b82612a24565b604082019050919050565b60006020820190508181036000830152612aaf81612a73565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b12602283611e00565b9150612b1d82612ab6565b604082019050919050565b60006020820190508181036000830152612b4181612b05565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612b7e601f83611e00565b9150612b8982612b48565b602082019050919050565b60006020820190508181036000830152612bad81612b71565b905091905056fea26469706673582212204b314ea3151ce15a7d26dce436cdb97b80381ccc2e6a394b98060a3de1f33d8764736f6c63430008110033a264697066735822122003f75e7eebfad05ca9b70957c74900c4b4e97572c90c749ebc4be8bb3cef774b64736f6c63430008110033",
}

// LiquidityFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidityFactoryMetaData.ABI instead.
var LiquidityFactoryABI = LiquidityFactoryMetaData.ABI

// LiquidityFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidityFactoryMetaData.Bin instead.
var LiquidityFactoryBin = LiquidityFactoryMetaData.Bin

// DeployLiquidityFactory deploys a new Ethereum contract, binding an instance of LiquidityFactory to it.
func DeployLiquidityFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LiquidityFactory, error) {
	parsed, err := LiquidityFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidityFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidityFactory{LiquidityFactoryCaller: LiquidityFactoryCaller{contract: contract}, LiquidityFactoryTransactor: LiquidityFactoryTransactor{contract: contract}, LiquidityFactoryFilterer: LiquidityFactoryFilterer{contract: contract}}, nil
}

// LiquidityFactory is an auto generated Go binding around an Ethereum contract.
type LiquidityFactory struct {
	LiquidityFactoryCaller     // Read-only binding to the contract
	LiquidityFactoryTransactor // Write-only binding to the contract
	LiquidityFactoryFilterer   // Log filterer for contract events
}

// LiquidityFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidityFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidityFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidityFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidityFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidityFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidityFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidityFactorySession struct {
	Contract     *LiquidityFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidityFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidityFactoryCallerSession struct {
	Contract *LiquidityFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// LiquidityFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidityFactoryTransactorSession struct {
	Contract     *LiquidityFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// LiquidityFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidityFactoryRaw struct {
	Contract *LiquidityFactory // Generic contract binding to access the raw methods on
}

// LiquidityFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidityFactoryCallerRaw struct {
	Contract *LiquidityFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidityFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidityFactoryTransactorRaw struct {
	Contract *LiquidityFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidityFactory creates a new instance of LiquidityFactory, bound to a specific deployed contract.
func NewLiquidityFactory(address common.Address, backend bind.ContractBackend) (*LiquidityFactory, error) {
	contract, err := bindLiquidityFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidityFactory{LiquidityFactoryCaller: LiquidityFactoryCaller{contract: contract}, LiquidityFactoryTransactor: LiquidityFactoryTransactor{contract: contract}, LiquidityFactoryFilterer: LiquidityFactoryFilterer{contract: contract}}, nil
}

// NewLiquidityFactoryCaller creates a new read-only instance of LiquidityFactory, bound to a specific deployed contract.
func NewLiquidityFactoryCaller(address common.Address, caller bind.ContractCaller) (*LiquidityFactoryCaller, error) {
	contract, err := bindLiquidityFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidityFactoryCaller{contract: contract}, nil
}

// NewLiquidityFactoryTransactor creates a new write-only instance of LiquidityFactory, bound to a specific deployed contract.
func NewLiquidityFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidityFactoryTransactor, error) {
	contract, err := bindLiquidityFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidityFactoryTransactor{contract: contract}, nil
}

// NewLiquidityFactoryFilterer creates a new log filterer instance of LiquidityFactory, bound to a specific deployed contract.
func NewLiquidityFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidityFactoryFilterer, error) {
	contract, err := bindLiquidityFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidityFactoryFilterer{contract: contract}, nil
}

// bindLiquidityFactory binds a generic wrapper to an already deployed contract.
func bindLiquidityFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidityFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidityFactory *LiquidityFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidityFactory.Contract.LiquidityFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidityFactory *LiquidityFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.LiquidityFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidityFactory *LiquidityFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.LiquidityFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidityFactory *LiquidityFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidityFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidityFactory *LiquidityFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidityFactory *LiquidityFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.contract.Transact(opts, method, params...)
}

// Contracts is a free data retrieval call binding the contract method 0x69dc9ff3.
//
// Solidity: function contracts(address ) view returns(address)
func (_LiquidityFactory *LiquidityFactoryCaller) Contracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _LiquidityFactory.contract.Call(opts, &out, "contracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x69dc9ff3.
//
// Solidity: function contracts(address ) view returns(address)
func (_LiquidityFactory *LiquidityFactorySession) Contracts(arg0 common.Address) (common.Address, error) {
	return _LiquidityFactory.Contract.Contracts(&_LiquidityFactory.CallOpts, arg0)
}

// Contracts is a free data retrieval call binding the contract method 0x69dc9ff3.
//
// Solidity: function contracts(address ) view returns(address)
func (_LiquidityFactory *LiquidityFactoryCallerSession) Contracts(arg0 common.Address) (common.Address, error) {
	return _LiquidityFactory.Contract.Contracts(&_LiquidityFactory.CallOpts, arg0)
}

// GetAddressWithName is a free data retrieval call binding the contract method 0xf66aee2d.
//
// Solidity: function getAddressWithName(string name) view returns(address)
func (_LiquidityFactory *LiquidityFactoryCaller) GetAddressWithName(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _LiquidityFactory.contract.Call(opts, &out, "getAddressWithName", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressWithName is a free data retrieval call binding the contract method 0xf66aee2d.
//
// Solidity: function getAddressWithName(string name) view returns(address)
func (_LiquidityFactory *LiquidityFactorySession) GetAddressWithName(name string) (common.Address, error) {
	return _LiquidityFactory.Contract.GetAddressWithName(&_LiquidityFactory.CallOpts, name)
}

// GetAddressWithName is a free data retrieval call binding the contract method 0xf66aee2d.
//
// Solidity: function getAddressWithName(string name) view returns(address)
func (_LiquidityFactory *LiquidityFactoryCallerSession) GetAddressWithName(name string) (common.Address, error) {
	return _LiquidityFactory.Contract.GetAddressWithName(&_LiquidityFactory.CallOpts, name)
}

// GetLiquidityList is a free data retrieval call binding the contract method 0x11d4b15d.
//
// Solidity: function getLiquidityList() view returns(string[])
func (_LiquidityFactory *LiquidityFactoryCaller) GetLiquidityList(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _LiquidityFactory.contract.Call(opts, &out, "getLiquidityList")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLiquidityList is a free data retrieval call binding the contract method 0x11d4b15d.
//
// Solidity: function getLiquidityList() view returns(string[])
func (_LiquidityFactory *LiquidityFactorySession) GetLiquidityList() ([]string, error) {
	return _LiquidityFactory.Contract.GetLiquidityList(&_LiquidityFactory.CallOpts)
}

// GetLiquidityList is a free data retrieval call binding the contract method 0x11d4b15d.
//
// Solidity: function getLiquidityList() view returns(string[])
func (_LiquidityFactory *LiquidityFactoryCallerSession) GetLiquidityList() ([]string, error) {
	return _LiquidityFactory.Contract.GetLiquidityList(&_LiquidityFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LiquidityFactory *LiquidityFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidityFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LiquidityFactory *LiquidityFactorySession) Owner() (common.Address, error) {
	return _LiquidityFactory.Contract.Owner(&_LiquidityFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LiquidityFactory *LiquidityFactoryCallerSession) Owner() (common.Address, error) {
	return _LiquidityFactory.Contract.Owner(&_LiquidityFactory.CallOpts)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_LiquidityFactory *LiquidityFactoryTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _LiquidityFactory.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_LiquidityFactory *LiquidityFactorySession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.ChangeOwner(&_LiquidityFactory.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_LiquidityFactory *LiquidityFactoryTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.ChangeOwner(&_LiquidityFactory.TransactOpts, _newOwner)
}

// NewLiquidity is a paid mutator transaction binding the contract method 0xc522bb80.
//
// Solidity: function newLiquidity(address _token1Address, address _token2Address) returns(address)
func (_LiquidityFactory *LiquidityFactoryTransactor) NewLiquidity(opts *bind.TransactOpts, _token1Address common.Address, _token2Address common.Address) (*types.Transaction, error) {
	return _LiquidityFactory.contract.Transact(opts, "newLiquidity", _token1Address, _token2Address)
}

// NewLiquidity is a paid mutator transaction binding the contract method 0xc522bb80.
//
// Solidity: function newLiquidity(address _token1Address, address _token2Address) returns(address)
func (_LiquidityFactory *LiquidityFactorySession) NewLiquidity(_token1Address common.Address, _token2Address common.Address) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.NewLiquidity(&_LiquidityFactory.TransactOpts, _token1Address, _token2Address)
}

// NewLiquidity is a paid mutator transaction binding the contract method 0xc522bb80.
//
// Solidity: function newLiquidity(address _token1Address, address _token2Address) returns(address)
func (_LiquidityFactory *LiquidityFactoryTransactorSession) NewLiquidity(_token1Address common.Address, _token2Address common.Address) (*types.Transaction, error) {
	return _LiquidityFactory.Contract.NewLiquidity(&_LiquidityFactory.TransactOpts, _token1Address, _token2Address)
}
